在做P4的时候，发现bison的内容有一些多，因为确实不知道到底需要看哪些，哪些需要深入的去理解，所以就准备把整个的学习流程记录下来，以方便梳理自己的思路。
首先我是大致的看了一下P4的内容，主要分为两步，第一步时理解bison这个工具，第二步就是实际编写。所以我就先去理解这个工具了。
1.理解bison工具：
首先打开README文档阅读，先是主要的结构，include，config，src。这些文件中包含了各类文件，但是有一点不是很清楚，这些文件之间的相互依赖关系是什么怎么样的不是特别清楚。但在弄清楚之前，我还是决定先将每个文件中的大致内容先了解一下。

config：先是这个文件下的东西。这里面有两种不同的文件，一种是.lex，一种是.y。首先看关于expr的文件，.lex就是与我们之前自己写过的差不过，我就大致看了看，注意expr.lex中是定义了小数的，我自己也测试了一下(稍微修改一些expr.in文件)，确实是支持小数的。然后主要看.y文件。通过一边看expr.y和bison manual我大致了解了bison的一些基本的写法。大致分为四个部分，第一个是一个引用部分，就是#include之类的，第二个部分时一些token和一些符号的声明部分，第三部分是文法部分，第四部分就是函数调用与返回部分，我大致是这么理解的。在expr.y中最后有意个yyerror函数，这个函数是怎么关联的，暂时还不是很清楚。通过查阅bison manual关于yyerror的解释是这样的，当进行语法分析的时候，如果发现错误，这会进入yyerror进行错误报告。基本内容是这样。并且我们可以自己去定义错误的类型，而不单单只是返回一个syntax error。在报告错误之后，如果错误是可恢复的，那么会继续程序的执行，如果不是可恢复的，就exit。大致就是这样一个情况。然后还有一个expr1.y文件，我查了下这个文件的目录文件说明，这两个.y文件一个是2义的一个是非2义的，一个通过yacc内部的优先级进行处理，一个人工进行处理。接下来看asgn这一部分，这一部分是关于赋值的。大致看一下.lex文件。首先看一下各个文件的介绍，然后对asgn.y进行分析。在这之前我们先关注一下.lex文件，这里有两个不同的.lex文件一个是asgn.lex，一个是asgn_err.lex(文档中是说它可以实现错误恢复)我仔细对比了这两个文件，它们在对括号进行处理的时候有不同的操作，后者记录的左右括号的个数，我觉得后面应该就是利用这个来进行错误恢复吧。接着刚才的asgn.y。在看到$n,@$,@n,$$这些符号的时候，我查阅了Named References，发现没有看懂，只有先放着了。大致看完了asgn.y我们对比一下之前看的expr.y发现，这里面我们有符号表的建立以及查询，这是一个新的地方，然后查阅Tracking Locations我们可以了解到，其实不用创建符号表也可以得到我们想要的结果，但是创建符号表可以得到我们自己所需要的更多的信息，可以帮助我们处理更多的事情，当然这个符号表的建立也是需要我们自己完成的。我还注意到，asgn.y在第一部分声明的时候多了一条#include<common.h>,这个我们之后可以在include文件中了解到它的作用，当然它是与创建符号表有密切关联的。然后是asgn1.y，它引入了一个新的非终结符op，asgn2ast.y它构造了一棵抽象语法树，暂时还不太清楚是S型还是L型的。接下来时asgn_err.y，这个文件与之前的asgn_err.lex相关联，它提供了错误恢复手段。这一对err的相关文件暂时还有些复杂，这个应该在慢慢熟悉bison的过程中逐步去掌握。config中的大致内容就是这些。

include：之前提到了common.h这个文件，那就先从这个文件开始，这里面主要定义了，符号表的结构，语法树的结构以及相关函数，错误信息的处理，大致就是这些，还有一些东西，因为暂时还没有感受到，也就不必多说。errcfg.h错误及错误信息的一些处理。op.h运算符的一些定义。util.h这里面是list的定义感觉暂时还没有遇到，先不详细说明。include中大致就是这些内容。

src：感觉这里面的东西应该是很重要的。先make clean掉，这里面包含了4个.c文件。ast.c文件内容如其名，是关于构造语法树用的。error.c同样如此这是用于处理错误信息的。list.c这是用于构造一个list类型用的。symtab.c这是构造符号表用的。

大致的内容就是这些，我先把bin文件中的东西全部删掉，然后make一下。bin中生成了6个可执行文件，分别为：asgn,asgn1,asgn2ast,asgn_err,expr,expr1，通过名字也知道他们是做什么的，这在之前的config文件中已经比较详细的说明了。下面是来了解一下它们是怎么生成的，以及之前所讲的一些文件之间的一个依赖的关系。打开makefile。我着重看其中的一个，因为其余的都差不多，主要看expr那一项的生成。首先expr这个最终要生成出来的可执行文件所依赖的文件有两个，一个是expr.y，一个是expr.lex。首先是由bison用expr.y，生成一个expr.tab.c文件出来，然后通过flex用expr.lex，生成一个expr.lex.c出来，最后用gcc编译expr.tab.c和.expr.lex.c生成一个expr可执行文件出来。大致就是这样一个关系。其他的可行文件的生成主要部分都是差不多的，而不同的文件可能会有一些其他的操作。我大致的看了一下生成出来的expr.tab.c(附带还会生成一个.h文件)，感受只有一个什么都没搞懂，一头雾水。虽然说只是看一个，但我还是觉得每一个单独编译一次，结果就发现了一个小小的问题，当我在make asgn2ast的时候，出现了错误，使得编译中断，这估计时makefile写得有点问题吧。在一起make的时候不会出现问题，而单独编译的时候会出现问题这应该某个地方关联上出了点问题吧。

下面我会进一步从bison的一些用法和语法上进行学习与理解。大致的理解深度，我的预期是，在example中用到什么东西，我就去把那东西尽量搞清楚，而对于没用到的，我都暂时不管，因为目前意义的意义不是很大，当它用到的时候再去学习会更好。关于bison的详细的一个理解在同一目录下的Comprehension of Bison文件中。在此就不再过多的说明了。

2.写.y,.lex.用bison
