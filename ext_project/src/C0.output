Terminals which are not used

   dosym


Grammar

    0 $accept: goal $end

    1 goal: Program

    2 Program: CDecl IntDecl ArDecl FuncDecl mainsym lparen rparen lbrace IntDecl ArDecl Stmt rbrace

    3 CDecl: /* empty */
    4      | constsym ident becomes front number CIDC semicolon CDecl

    5 CIDC: /* empty */
    6     | comma ident becomes front number CIDC

    7 IntDecl: /* empty */
    8        | integersym ident BN CIDI semicolon IntDecl

    9 CIDI: /* empty */
   10     | comma ident BN CIDI

   11 ArDecl: /* empty */
   12       | arraysym ident lbracket number rbracket AIDI semicolon ArDecl

   13 AIDI: /* empty */
   14     | lbracket number rbracket AIDI

   15 BN: /* empty */
   16   | becomes front number

   17 FuncDecl: /* empty */
   18         | VDecl FuncDecl
   19         | IDecl FuncDecl

   20 VDecl: voidsym ident lparen Argu rparen lbrace CDecl IntDecl ArDecl Stmt rbrace

   21 IDecl: funcintegersym ident lparen Argu rparen lbrace CDecl IntDecl ArDecl Stmt rbrace

   22 Argu: /* empty */
   23     | integersym ident Argub

   24 Argub: /* empty */
   25      | comma integersym ident Argub

   26 Stmt: /* empty */
   27     | Factor IDT semicolon Stmt
   28     | ifsym lparen cond rparen lbrace Stmt rbrace Stmt
   29     | whilesym lparen cond rparen lbrace Stmt rbrace Stmt
   30     | forsym lparen FStmt semicolon cond semicolon FStmt rparen lbrace Stmt rbrace Stmt
   31     | returnsym Expx semicolon Stmt
   32     | Putnumsym lparen Exp rparen semicolon Stmt

   33 Expx: /* empty */
   34     | Exp

   35 FStmt: /* empty */
   36      | Factor IDT

   37 IDT: /* empty */
   38    | becomes Exp

   39 cond: Exp RelOp Exp

   40 RelOp: eql
   41      | leq
   42      | geq
   43      | lss
   44      | gtr
   45      | neq

   46 Exp: front Term TM

   47 front: /* empty */
   48      | plus
   49      | minus

   50 TM: /* empty */
   51   | plus Term TM
   52   | minus Term TM

   53 Term: Factor FT

   54 FT: /* empty */
   55   | times Factor FT
   56   | divd Factor FT
   57   | mod Factor FT

   58 Factor: ident
   59       | ident lparen Argca rparen
   60       | ident lbracket Exp rbracket Arb
   61       | number
   62       | lparen Exp rparen
   63       | Getnumsym lparen rparen

   64 Argca: /* empty */
   65      | Exp Argcab

   66 Argcab: /* empty */
   67       | comma Exp Argcab

   68 Arb: /* empty */
   69    | lbracket Exp rbracket Arb


Terminals, with rules where they appear

$end (0) 0
error (256)
number (258) 4 6 12 14 16 61
ident (259) 4 6 8 10 12 20 21 23 25 58 59 60
plus (260) 48 51
minus (261) 49 52
times (262) 55
divd (263) 56
mod (264) 57
lparen (265) 2 20 21 28 29 30 32 59 62 63
rparen (266) 2 20 21 28 29 30 32 59 62 63
lbrace (267) 2 20 21 28 29 30
rbrace (268) 2 20 21 28 29 30
lbracket (269) 12 14 60 69
rbracket (270) 12 14 60 69
becomes (271) 4 6 16 38
leq (272) 41
neq (273) 45
geq (274) 42
lss (275) 43
gtr (276) 44
eql (277) 40
integersym (278) 8 23 25
arraysym (279) 12
voidsym (280) 20
funcintegersym (281) 21
returnsym (282) 31
dosym (283)
ifsym (284) 28
constsym (285) 4
mainsym (286) 2
whilesym (287) 29
forsym (288) 30
Getnumsym (289) 63
Putnumsym (290) 32
comma (291) 6 10 25 67
semicolon (292) 4 8 12 27 30 31 32


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
goal (39)
    on left: 1, on right: 0
Program (40)
    on left: 2, on right: 1
CDecl (41)
    on left: 3 4, on right: 2 4 20 21
CIDC (42)
    on left: 5 6, on right: 4 6
IntDecl (43)
    on left: 7 8, on right: 2 8 20 21
CIDI (44)
    on left: 9 10, on right: 8 10
ArDecl (45)
    on left: 11 12, on right: 2 12 20 21
AIDI (46)
    on left: 13 14, on right: 12 14
BN (47)
    on left: 15 16, on right: 8 10
FuncDecl (48)
    on left: 17 18 19, on right: 2 18 19
VDecl (49)
    on left: 20, on right: 18
IDecl (50)
    on left: 21, on right: 19
Argu (51)
    on left: 22 23, on right: 20 21
Argub (52)
    on left: 24 25, on right: 23 25
Stmt (53)
    on left: 26 27 28 29 30 31 32, on right: 2 20 21 27 28 29 30 31
    32
Expx (54)
    on left: 33 34, on right: 31
FStmt (55)
    on left: 35 36, on right: 30
IDT (56)
    on left: 37 38, on right: 27 36
cond (57)
    on left: 39, on right: 28 29 30
RelOp (58)
    on left: 40 41 42 43 44 45, on right: 39
Exp (59)
    on left: 46, on right: 32 34 38 39 60 62 65 67 69
front (60)
    on left: 47 48 49, on right: 4 6 16 46
TM (61)
    on left: 50 51 52, on right: 46 51 52
Term (62)
    on left: 53, on right: 46 51 52
FT (63)
    on left: 54 55 56 57, on right: 53 55 56 57
Factor (64)
    on left: 58 59 60 61 62 63, on right: 27 36 53 55 56 57
Argca (65)
    on left: 64 65, on right: 59
Argcab (66)
    on left: 66 67, on right: 65 67
Arb (67)
    on left: 68 69, on right: 60 69


state 0

    0 $accept: . goal $end

    constsym  shift, and go to state 1

    $default  reduce using rule 3 (CDecl)

    goal     go to state 2
    Program  go to state 3
    CDecl    go to state 4


state 1

    4 CDecl: constsym . ident becomes front number CIDC semicolon CDecl

    ident  shift, and go to state 5


state 2

    0 $accept: goal . $end

    $end  shift, and go to state 6


state 3

    1 goal: Program .

    $default  reduce using rule 1 (goal)


state 4

    2 Program: CDecl . IntDecl ArDecl FuncDecl mainsym lparen rparen lbrace IntDecl ArDecl Stmt rbrace

    integersym  shift, and go to state 7

    $default  reduce using rule 7 (IntDecl)

    IntDecl  go to state 8


state 5

    4 CDecl: constsym ident . becomes front number CIDC semicolon CDecl

    becomes  shift, and go to state 9


state 6

    0 $accept: goal $end .

    $default  accept


state 7

    8 IntDecl: integersym . ident BN CIDI semicolon IntDecl

    ident  shift, and go to state 10


state 8

    2 Program: CDecl IntDecl . ArDecl FuncDecl mainsym lparen rparen lbrace IntDecl ArDecl Stmt rbrace

    arraysym  shift, and go to state 11

    $default  reduce using rule 11 (ArDecl)

    ArDecl  go to state 12


state 9

    4 CDecl: constsym ident becomes . front number CIDC semicolon CDecl

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    front  go to state 15


state 10

    8 IntDecl: integersym ident . BN CIDI semicolon IntDecl

    becomes  shift, and go to state 16

    $default  reduce using rule 15 (BN)

    BN  go to state 17


state 11

   12 ArDecl: arraysym . ident lbracket number rbracket AIDI semicolon ArDecl

    ident  shift, and go to state 18


state 12

    2 Program: CDecl IntDecl ArDecl . FuncDecl mainsym lparen rparen lbrace IntDecl ArDecl Stmt rbrace

    voidsym         shift, and go to state 19
    funcintegersym  shift, and go to state 20

    $default  reduce using rule 17 (FuncDecl)

    FuncDecl  go to state 21
    VDecl     go to state 22
    IDecl     go to state 23


state 13

   48 front: plus .

    $default  reduce using rule 48 (front)


state 14

   49 front: minus .

    $default  reduce using rule 49 (front)


state 15

    4 CDecl: constsym ident becomes front . number CIDC semicolon CDecl

    number  shift, and go to state 24


state 16

   16 BN: becomes . front number

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    front  go to state 25


state 17

    8 IntDecl: integersym ident BN . CIDI semicolon IntDecl

    comma  shift, and go to state 26

    $default  reduce using rule 9 (CIDI)

    CIDI  go to state 27


state 18

   12 ArDecl: arraysym ident . lbracket number rbracket AIDI semicolon ArDecl

    lbracket  shift, and go to state 28


state 19

   20 VDecl: voidsym . ident lparen Argu rparen lbrace CDecl IntDecl ArDecl Stmt rbrace

    ident  shift, and go to state 29


state 20

   21 IDecl: funcintegersym . ident lparen Argu rparen lbrace CDecl IntDecl ArDecl Stmt rbrace

    ident  shift, and go to state 30


state 21

    2 Program: CDecl IntDecl ArDecl FuncDecl . mainsym lparen rparen lbrace IntDecl ArDecl Stmt rbrace

    mainsym  shift, and go to state 31


state 22

   18 FuncDecl: VDecl . FuncDecl

    voidsym         shift, and go to state 19
    funcintegersym  shift, and go to state 20

    $default  reduce using rule 17 (FuncDecl)

    FuncDecl  go to state 32
    VDecl     go to state 22
    IDecl     go to state 23


state 23

   19 FuncDecl: IDecl . FuncDecl

    voidsym         shift, and go to state 19
    funcintegersym  shift, and go to state 20

    $default  reduce using rule 17 (FuncDecl)

    FuncDecl  go to state 33
    VDecl     go to state 22
    IDecl     go to state 23


state 24

    4 CDecl: constsym ident becomes front number . CIDC semicolon CDecl

    comma  shift, and go to state 34

    $default  reduce using rule 5 (CIDC)

    CIDC  go to state 35


state 25

   16 BN: becomes front . number

    number  shift, and go to state 36


state 26

   10 CIDI: comma . ident BN CIDI

    ident  shift, and go to state 37


state 27

    8 IntDecl: integersym ident BN CIDI . semicolon IntDecl

    semicolon  shift, and go to state 38


state 28

   12 ArDecl: arraysym ident lbracket . number rbracket AIDI semicolon ArDecl

    number  shift, and go to state 39


state 29

   20 VDecl: voidsym ident . lparen Argu rparen lbrace CDecl IntDecl ArDecl Stmt rbrace

    lparen  shift, and go to state 40


state 30

   21 IDecl: funcintegersym ident . lparen Argu rparen lbrace CDecl IntDecl ArDecl Stmt rbrace

    lparen  shift, and go to state 41


state 31

    2 Program: CDecl IntDecl ArDecl FuncDecl mainsym . lparen rparen lbrace IntDecl ArDecl Stmt rbrace

    lparen  shift, and go to state 42


state 32

   18 FuncDecl: VDecl FuncDecl .

    $default  reduce using rule 18 (FuncDecl)


state 33

   19 FuncDecl: IDecl FuncDecl .

    $default  reduce using rule 19 (FuncDecl)


state 34

    6 CIDC: comma . ident becomes front number CIDC

    ident  shift, and go to state 43


state 35

    4 CDecl: constsym ident becomes front number CIDC . semicolon CDecl

    semicolon  shift, and go to state 44


state 36

   16 BN: becomes front number .

    $default  reduce using rule 16 (BN)


state 37

   10 CIDI: comma ident . BN CIDI

    becomes  shift, and go to state 16

    $default  reduce using rule 15 (BN)

    BN  go to state 45


state 38

    8 IntDecl: integersym ident BN CIDI semicolon . IntDecl

    integersym  shift, and go to state 7

    $default  reduce using rule 7 (IntDecl)

    IntDecl  go to state 46


state 39

   12 ArDecl: arraysym ident lbracket number . rbracket AIDI semicolon ArDecl

    rbracket  shift, and go to state 47


state 40

   20 VDecl: voidsym ident lparen . Argu rparen lbrace CDecl IntDecl ArDecl Stmt rbrace

    integersym  shift, and go to state 48

    $default  reduce using rule 22 (Argu)

    Argu  go to state 49


state 41

   21 IDecl: funcintegersym ident lparen . Argu rparen lbrace CDecl IntDecl ArDecl Stmt rbrace

    integersym  shift, and go to state 48

    $default  reduce using rule 22 (Argu)

    Argu  go to state 50


state 42

    2 Program: CDecl IntDecl ArDecl FuncDecl mainsym lparen . rparen lbrace IntDecl ArDecl Stmt rbrace

    rparen  shift, and go to state 51


state 43

    6 CIDC: comma ident . becomes front number CIDC

    becomes  shift, and go to state 52


state 44

    4 CDecl: constsym ident becomes front number CIDC semicolon . CDecl

    constsym  shift, and go to state 1

    $default  reduce using rule 3 (CDecl)

    CDecl  go to state 53


state 45

   10 CIDI: comma ident BN . CIDI

    comma  shift, and go to state 26

    $default  reduce using rule 9 (CIDI)

    CIDI  go to state 54


state 46

    8 IntDecl: integersym ident BN CIDI semicolon IntDecl .

    $default  reduce using rule 8 (IntDecl)


state 47

   12 ArDecl: arraysym ident lbracket number rbracket . AIDI semicolon ArDecl

    lbracket  shift, and go to state 55

    $default  reduce using rule 13 (AIDI)

    AIDI  go to state 56


state 48

   23 Argu: integersym . ident Argub

    ident  shift, and go to state 57


state 49

   20 VDecl: voidsym ident lparen Argu . rparen lbrace CDecl IntDecl ArDecl Stmt rbrace

    rparen  shift, and go to state 58


state 50

   21 IDecl: funcintegersym ident lparen Argu . rparen lbrace CDecl IntDecl ArDecl Stmt rbrace

    rparen  shift, and go to state 59


state 51

    2 Program: CDecl IntDecl ArDecl FuncDecl mainsym lparen rparen . lbrace IntDecl ArDecl Stmt rbrace

    lbrace  shift, and go to state 60


state 52

    6 CIDC: comma ident becomes . front number CIDC

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    front  go to state 61


state 53

    4 CDecl: constsym ident becomes front number CIDC semicolon CDecl .

    $default  reduce using rule 4 (CDecl)


state 54

   10 CIDI: comma ident BN CIDI .

    $default  reduce using rule 10 (CIDI)


state 55

   14 AIDI: lbracket . number rbracket AIDI

    number  shift, and go to state 62


state 56

   12 ArDecl: arraysym ident lbracket number rbracket AIDI . semicolon ArDecl

    semicolon  shift, and go to state 63


state 57

   23 Argu: integersym ident . Argub

    comma  shift, and go to state 64

    $default  reduce using rule 24 (Argub)

    Argub  go to state 65


state 58

   20 VDecl: voidsym ident lparen Argu rparen . lbrace CDecl IntDecl ArDecl Stmt rbrace

    lbrace  shift, and go to state 66


state 59

   21 IDecl: funcintegersym ident lparen Argu rparen . lbrace CDecl IntDecl ArDecl Stmt rbrace

    lbrace  shift, and go to state 67


state 60

    2 Program: CDecl IntDecl ArDecl FuncDecl mainsym lparen rparen lbrace . IntDecl ArDecl Stmt rbrace

    integersym  shift, and go to state 7

    $default  reduce using rule 7 (IntDecl)

    IntDecl  go to state 68


state 61

    6 CIDC: comma ident becomes front . number CIDC

    number  shift, and go to state 69


state 62

   14 AIDI: lbracket number . rbracket AIDI

    rbracket  shift, and go to state 70


state 63

   12 ArDecl: arraysym ident lbracket number rbracket AIDI semicolon . ArDecl

    arraysym  shift, and go to state 11

    $default  reduce using rule 11 (ArDecl)

    ArDecl  go to state 71


state 64

   25 Argub: comma . integersym ident Argub

    integersym  shift, and go to state 72


state 65

   23 Argu: integersym ident Argub .

    $default  reduce using rule 23 (Argu)


state 66

   20 VDecl: voidsym ident lparen Argu rparen lbrace . CDecl IntDecl ArDecl Stmt rbrace

    constsym  shift, and go to state 1

    $default  reduce using rule 3 (CDecl)

    CDecl  go to state 73


state 67

   21 IDecl: funcintegersym ident lparen Argu rparen lbrace . CDecl IntDecl ArDecl Stmt rbrace

    constsym  shift, and go to state 1

    $default  reduce using rule 3 (CDecl)

    CDecl  go to state 74


state 68

    2 Program: CDecl IntDecl ArDecl FuncDecl mainsym lparen rparen lbrace IntDecl . ArDecl Stmt rbrace

    arraysym  shift, and go to state 11

    $default  reduce using rule 11 (ArDecl)

    ArDecl  go to state 75


state 69

    6 CIDC: comma ident becomes front number . CIDC

    comma  shift, and go to state 34

    $default  reduce using rule 5 (CIDC)

    CIDC  go to state 76


state 70

   14 AIDI: lbracket number rbracket . AIDI

    lbracket  shift, and go to state 55

    $default  reduce using rule 13 (AIDI)

    AIDI  go to state 77


state 71

   12 ArDecl: arraysym ident lbracket number rbracket AIDI semicolon ArDecl .

    $default  reduce using rule 12 (ArDecl)


state 72

   25 Argub: comma integersym . ident Argub

    ident  shift, and go to state 78


state 73

   20 VDecl: voidsym ident lparen Argu rparen lbrace CDecl . IntDecl ArDecl Stmt rbrace

    integersym  shift, and go to state 7

    $default  reduce using rule 7 (IntDecl)

    IntDecl  go to state 79


state 74

   21 IDecl: funcintegersym ident lparen Argu rparen lbrace CDecl . IntDecl ArDecl Stmt rbrace

    integersym  shift, and go to state 7

    $default  reduce using rule 7 (IntDecl)

    IntDecl  go to state 80


state 75

    2 Program: CDecl IntDecl ArDecl FuncDecl mainsym lparen rparen lbrace IntDecl ArDecl . Stmt rbrace

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    returnsym  shift, and go to state 84
    ifsym      shift, and go to state 85
    whilesym   shift, and go to state 86
    forsym     shift, and go to state 87
    Getnumsym  shift, and go to state 88
    Putnumsym  shift, and go to state 89

    $default  reduce using rule 26 (Stmt)

    Stmt    go to state 90
    Factor  go to state 91


state 76

    6 CIDC: comma ident becomes front number CIDC .

    $default  reduce using rule 6 (CIDC)


state 77

   14 AIDI: lbracket number rbracket AIDI .

    $default  reduce using rule 14 (AIDI)


state 78

   25 Argub: comma integersym ident . Argub

    comma  shift, and go to state 64

    $default  reduce using rule 24 (Argub)

    Argub  go to state 92


state 79

   20 VDecl: voidsym ident lparen Argu rparen lbrace CDecl IntDecl . ArDecl Stmt rbrace

    arraysym  shift, and go to state 11

    $default  reduce using rule 11 (ArDecl)

    ArDecl  go to state 93


state 80

   21 IDecl: funcintegersym ident lparen Argu rparen lbrace CDecl IntDecl . ArDecl Stmt rbrace

    arraysym  shift, and go to state 11

    $default  reduce using rule 11 (ArDecl)

    ArDecl  go to state 94


state 81

   61 Factor: number .

    $default  reduce using rule 61 (Factor)


state 82

   58 Factor: ident .
   59       | ident . lparen Argca rparen
   60       | ident . lbracket Exp rbracket Arb

    lparen    shift, and go to state 95
    lbracket  shift, and go to state 96

    $default  reduce using rule 58 (Factor)


state 83

   62 Factor: lparen . Exp rparen

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    Exp    go to state 97
    front  go to state 98


state 84

   31 Stmt: returnsym . Expx semicolon Stmt

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    semicolon  reduce using rule 33 (Expx)
    $default   reduce using rule 47 (front)

    Expx   go to state 99
    Exp    go to state 100
    front  go to state 98


state 85

   28 Stmt: ifsym . lparen cond rparen lbrace Stmt rbrace Stmt

    lparen  shift, and go to state 101


state 86

   29 Stmt: whilesym . lparen cond rparen lbrace Stmt rbrace Stmt

    lparen  shift, and go to state 102


state 87

   30 Stmt: forsym . lparen FStmt semicolon cond semicolon FStmt rparen lbrace Stmt rbrace Stmt

    lparen  shift, and go to state 103


state 88

   63 Factor: Getnumsym . lparen rparen

    lparen  shift, and go to state 104


state 89

   32 Stmt: Putnumsym . lparen Exp rparen semicolon Stmt

    lparen  shift, and go to state 105


state 90

    2 Program: CDecl IntDecl ArDecl FuncDecl mainsym lparen rparen lbrace IntDecl ArDecl Stmt . rbrace

    rbrace  shift, and go to state 106


state 91

   27 Stmt: Factor . IDT semicolon Stmt

    becomes  shift, and go to state 107

    $default  reduce using rule 37 (IDT)

    IDT  go to state 108


state 92

   25 Argub: comma integersym ident Argub .

    $default  reduce using rule 25 (Argub)


state 93

   20 VDecl: voidsym ident lparen Argu rparen lbrace CDecl IntDecl ArDecl . Stmt rbrace

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    returnsym  shift, and go to state 84
    ifsym      shift, and go to state 85
    whilesym   shift, and go to state 86
    forsym     shift, and go to state 87
    Getnumsym  shift, and go to state 88
    Putnumsym  shift, and go to state 89

    $default  reduce using rule 26 (Stmt)

    Stmt    go to state 109
    Factor  go to state 91


state 94

   21 IDecl: funcintegersym ident lparen Argu rparen lbrace CDecl IntDecl ArDecl . Stmt rbrace

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    returnsym  shift, and go to state 84
    ifsym      shift, and go to state 85
    whilesym   shift, and go to state 86
    forsym     shift, and go to state 87
    Getnumsym  shift, and go to state 88
    Putnumsym  shift, and go to state 89

    $default  reduce using rule 26 (Stmt)

    Stmt    go to state 110
    Factor  go to state 91


state 95

   59 Factor: ident lparen . Argca rparen

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    rparen    reduce using rule 64 (Argca)
    $default  reduce using rule 47 (front)

    Exp    go to state 111
    front  go to state 98
    Argca  go to state 112


state 96

   60 Factor: ident lbracket . Exp rbracket Arb

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    Exp    go to state 113
    front  go to state 98


state 97

   62 Factor: lparen Exp . rparen

    rparen  shift, and go to state 114


state 98

   46 Exp: front . Term TM

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    Getnumsym  shift, and go to state 88

    Term    go to state 115
    Factor  go to state 116


state 99

   31 Stmt: returnsym Expx . semicolon Stmt

    semicolon  shift, and go to state 117


state 100

   34 Expx: Exp .

    $default  reduce using rule 34 (Expx)


state 101

   28 Stmt: ifsym lparen . cond rparen lbrace Stmt rbrace Stmt

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    cond   go to state 118
    Exp    go to state 119
    front  go to state 98


state 102

   29 Stmt: whilesym lparen . cond rparen lbrace Stmt rbrace Stmt

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    cond   go to state 120
    Exp    go to state 119
    front  go to state 98


state 103

   30 Stmt: forsym lparen . FStmt semicolon cond semicolon FStmt rparen lbrace Stmt rbrace Stmt

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    Getnumsym  shift, and go to state 88

    $default  reduce using rule 35 (FStmt)

    FStmt   go to state 121
    Factor  go to state 122


state 104

   63 Factor: Getnumsym lparen . rparen

    rparen  shift, and go to state 123


state 105

   32 Stmt: Putnumsym lparen . Exp rparen semicolon Stmt

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    Exp    go to state 124
    front  go to state 98


state 106

    2 Program: CDecl IntDecl ArDecl FuncDecl mainsym lparen rparen lbrace IntDecl ArDecl Stmt rbrace .

    $default  reduce using rule 2 (Program)


state 107

   38 IDT: becomes . Exp

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    Exp    go to state 125
    front  go to state 98


state 108

   27 Stmt: Factor IDT . semicolon Stmt

    semicolon  shift, and go to state 126


state 109

   20 VDecl: voidsym ident lparen Argu rparen lbrace CDecl IntDecl ArDecl Stmt . rbrace

    rbrace  shift, and go to state 127


state 110

   21 IDecl: funcintegersym ident lparen Argu rparen lbrace CDecl IntDecl ArDecl Stmt . rbrace

    rbrace  shift, and go to state 128


state 111

   65 Argca: Exp . Argcab

    comma  shift, and go to state 129

    $default  reduce using rule 66 (Argcab)

    Argcab  go to state 130


state 112

   59 Factor: ident lparen Argca . rparen

    rparen  shift, and go to state 131


state 113

   60 Factor: ident lbracket Exp . rbracket Arb

    rbracket  shift, and go to state 132


state 114

   62 Factor: lparen Exp rparen .

    $default  reduce using rule 62 (Factor)


state 115

   46 Exp: front Term . TM

    plus   shift, and go to state 133
    minus  shift, and go to state 134

    $default  reduce using rule 50 (TM)

    TM  go to state 135


state 116

   53 Term: Factor . FT

    times  shift, and go to state 136
    divd   shift, and go to state 137
    mod    shift, and go to state 138

    $default  reduce using rule 54 (FT)

    FT  go to state 139


state 117

   31 Stmt: returnsym Expx semicolon . Stmt

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    returnsym  shift, and go to state 84
    ifsym      shift, and go to state 85
    whilesym   shift, and go to state 86
    forsym     shift, and go to state 87
    Getnumsym  shift, and go to state 88
    Putnumsym  shift, and go to state 89

    $default  reduce using rule 26 (Stmt)

    Stmt    go to state 140
    Factor  go to state 91


state 118

   28 Stmt: ifsym lparen cond . rparen lbrace Stmt rbrace Stmt

    rparen  shift, and go to state 141


state 119

   39 cond: Exp . RelOp Exp

    leq  shift, and go to state 142
    neq  shift, and go to state 143
    geq  shift, and go to state 144
    lss  shift, and go to state 145
    gtr  shift, and go to state 146
    eql  shift, and go to state 147

    RelOp  go to state 148


state 120

   29 Stmt: whilesym lparen cond . rparen lbrace Stmt rbrace Stmt

    rparen  shift, and go to state 149


state 121

   30 Stmt: forsym lparen FStmt . semicolon cond semicolon FStmt rparen lbrace Stmt rbrace Stmt

    semicolon  shift, and go to state 150


state 122

   36 FStmt: Factor . IDT

    becomes  shift, and go to state 107

    $default  reduce using rule 37 (IDT)

    IDT  go to state 151


state 123

   63 Factor: Getnumsym lparen rparen .

    $default  reduce using rule 63 (Factor)


state 124

   32 Stmt: Putnumsym lparen Exp . rparen semicolon Stmt

    rparen  shift, and go to state 152


state 125

   38 IDT: becomes Exp .

    $default  reduce using rule 38 (IDT)


state 126

   27 Stmt: Factor IDT semicolon . Stmt

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    returnsym  shift, and go to state 84
    ifsym      shift, and go to state 85
    whilesym   shift, and go to state 86
    forsym     shift, and go to state 87
    Getnumsym  shift, and go to state 88
    Putnumsym  shift, and go to state 89

    $default  reduce using rule 26 (Stmt)

    Stmt    go to state 153
    Factor  go to state 91


state 127

   20 VDecl: voidsym ident lparen Argu rparen lbrace CDecl IntDecl ArDecl Stmt rbrace .

    $default  reduce using rule 20 (VDecl)


state 128

   21 IDecl: funcintegersym ident lparen Argu rparen lbrace CDecl IntDecl ArDecl Stmt rbrace .

    $default  reduce using rule 21 (IDecl)


state 129

   67 Argcab: comma . Exp Argcab

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    Exp    go to state 154
    front  go to state 98


state 130

   65 Argca: Exp Argcab .

    $default  reduce using rule 65 (Argca)


state 131

   59 Factor: ident lparen Argca rparen .

    $default  reduce using rule 59 (Factor)


state 132

   60 Factor: ident lbracket Exp rbracket . Arb

    lbracket  shift, and go to state 155

    $default  reduce using rule 68 (Arb)

    Arb  go to state 156


state 133

   51 TM: plus . Term TM

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    Getnumsym  shift, and go to state 88

    Term    go to state 157
    Factor  go to state 116


state 134

   52 TM: minus . Term TM

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    Getnumsym  shift, and go to state 88

    Term    go to state 158
    Factor  go to state 116


state 135

   46 Exp: front Term TM .

    $default  reduce using rule 46 (Exp)


state 136

   55 FT: times . Factor FT

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    Getnumsym  shift, and go to state 88

    Factor  go to state 159


state 137

   56 FT: divd . Factor FT

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    Getnumsym  shift, and go to state 88

    Factor  go to state 160


state 138

   57 FT: mod . Factor FT

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    Getnumsym  shift, and go to state 88

    Factor  go to state 161


state 139

   53 Term: Factor FT .

    $default  reduce using rule 53 (Term)


state 140

   31 Stmt: returnsym Expx semicolon Stmt .

    $default  reduce using rule 31 (Stmt)


state 141

   28 Stmt: ifsym lparen cond rparen . lbrace Stmt rbrace Stmt

    lbrace  shift, and go to state 162


state 142

   41 RelOp: leq .

    $default  reduce using rule 41 (RelOp)


state 143

   45 RelOp: neq .

    $default  reduce using rule 45 (RelOp)


state 144

   42 RelOp: geq .

    $default  reduce using rule 42 (RelOp)


state 145

   43 RelOp: lss .

    $default  reduce using rule 43 (RelOp)


state 146

   44 RelOp: gtr .

    $default  reduce using rule 44 (RelOp)


state 147

   40 RelOp: eql .

    $default  reduce using rule 40 (RelOp)


state 148

   39 cond: Exp RelOp . Exp

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    Exp    go to state 163
    front  go to state 98


state 149

   29 Stmt: whilesym lparen cond rparen . lbrace Stmt rbrace Stmt

    lbrace  shift, and go to state 164


state 150

   30 Stmt: forsym lparen FStmt semicolon . cond semicolon FStmt rparen lbrace Stmt rbrace Stmt

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    cond   go to state 165
    Exp    go to state 119
    front  go to state 98


state 151

   36 FStmt: Factor IDT .

    $default  reduce using rule 36 (FStmt)


state 152

   32 Stmt: Putnumsym lparen Exp rparen . semicolon Stmt

    semicolon  shift, and go to state 166


state 153

   27 Stmt: Factor IDT semicolon Stmt .

    $default  reduce using rule 27 (Stmt)


state 154

   67 Argcab: comma Exp . Argcab

    comma  shift, and go to state 129

    $default  reduce using rule 66 (Argcab)

    Argcab  go to state 167


state 155

   69 Arb: lbracket . Exp rbracket Arb

    plus   shift, and go to state 13
    minus  shift, and go to state 14

    $default  reduce using rule 47 (front)

    Exp    go to state 168
    front  go to state 98


state 156

   60 Factor: ident lbracket Exp rbracket Arb .

    $default  reduce using rule 60 (Factor)


state 157

   51 TM: plus Term . TM

    plus   shift, and go to state 133
    minus  shift, and go to state 134

    $default  reduce using rule 50 (TM)

    TM  go to state 169


state 158

   52 TM: minus Term . TM

    plus   shift, and go to state 133
    minus  shift, and go to state 134

    $default  reduce using rule 50 (TM)

    TM  go to state 170


state 159

   55 FT: times Factor . FT

    times  shift, and go to state 136
    divd   shift, and go to state 137
    mod    shift, and go to state 138

    $default  reduce using rule 54 (FT)

    FT  go to state 171


state 160

   56 FT: divd Factor . FT

    times  shift, and go to state 136
    divd   shift, and go to state 137
    mod    shift, and go to state 138

    $default  reduce using rule 54 (FT)

    FT  go to state 172


state 161

   57 FT: mod Factor . FT

    times  shift, and go to state 136
    divd   shift, and go to state 137
    mod    shift, and go to state 138

    $default  reduce using rule 54 (FT)

    FT  go to state 173


state 162

   28 Stmt: ifsym lparen cond rparen lbrace . Stmt rbrace Stmt

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    returnsym  shift, and go to state 84
    ifsym      shift, and go to state 85
    whilesym   shift, and go to state 86
    forsym     shift, and go to state 87
    Getnumsym  shift, and go to state 88
    Putnumsym  shift, and go to state 89

    $default  reduce using rule 26 (Stmt)

    Stmt    go to state 174
    Factor  go to state 91


state 163

   39 cond: Exp RelOp Exp .

    $default  reduce using rule 39 (cond)


state 164

   29 Stmt: whilesym lparen cond rparen lbrace . Stmt rbrace Stmt

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    returnsym  shift, and go to state 84
    ifsym      shift, and go to state 85
    whilesym   shift, and go to state 86
    forsym     shift, and go to state 87
    Getnumsym  shift, and go to state 88
    Putnumsym  shift, and go to state 89

    $default  reduce using rule 26 (Stmt)

    Stmt    go to state 175
    Factor  go to state 91


state 165

   30 Stmt: forsym lparen FStmt semicolon cond . semicolon FStmt rparen lbrace Stmt rbrace Stmt

    semicolon  shift, and go to state 176


state 166

   32 Stmt: Putnumsym lparen Exp rparen semicolon . Stmt

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    returnsym  shift, and go to state 84
    ifsym      shift, and go to state 85
    whilesym   shift, and go to state 86
    forsym     shift, and go to state 87
    Getnumsym  shift, and go to state 88
    Putnumsym  shift, and go to state 89

    $default  reduce using rule 26 (Stmt)

    Stmt    go to state 177
    Factor  go to state 91


state 167

   67 Argcab: comma Exp Argcab .

    $default  reduce using rule 67 (Argcab)


state 168

   69 Arb: lbracket Exp . rbracket Arb

    rbracket  shift, and go to state 178


state 169

   51 TM: plus Term TM .

    $default  reduce using rule 51 (TM)


state 170

   52 TM: minus Term TM .

    $default  reduce using rule 52 (TM)


state 171

   55 FT: times Factor FT .

    $default  reduce using rule 55 (FT)


state 172

   56 FT: divd Factor FT .

    $default  reduce using rule 56 (FT)


state 173

   57 FT: mod Factor FT .

    $default  reduce using rule 57 (FT)


state 174

   28 Stmt: ifsym lparen cond rparen lbrace Stmt . rbrace Stmt

    rbrace  shift, and go to state 179


state 175

   29 Stmt: whilesym lparen cond rparen lbrace Stmt . rbrace Stmt

    rbrace  shift, and go to state 180


state 176

   30 Stmt: forsym lparen FStmt semicolon cond semicolon . FStmt rparen lbrace Stmt rbrace Stmt

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    Getnumsym  shift, and go to state 88

    $default  reduce using rule 35 (FStmt)

    FStmt   go to state 181
    Factor  go to state 122


state 177

   32 Stmt: Putnumsym lparen Exp rparen semicolon Stmt .

    $default  reduce using rule 32 (Stmt)


state 178

   69 Arb: lbracket Exp rbracket . Arb

    lbracket  shift, and go to state 155

    $default  reduce using rule 68 (Arb)

    Arb  go to state 182


state 179

   28 Stmt: ifsym lparen cond rparen lbrace Stmt rbrace . Stmt

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    returnsym  shift, and go to state 84
    ifsym      shift, and go to state 85
    whilesym   shift, and go to state 86
    forsym     shift, and go to state 87
    Getnumsym  shift, and go to state 88
    Putnumsym  shift, and go to state 89

    $default  reduce using rule 26 (Stmt)

    Stmt    go to state 183
    Factor  go to state 91


state 180

   29 Stmt: whilesym lparen cond rparen lbrace Stmt rbrace . Stmt

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    returnsym  shift, and go to state 84
    ifsym      shift, and go to state 85
    whilesym   shift, and go to state 86
    forsym     shift, and go to state 87
    Getnumsym  shift, and go to state 88
    Putnumsym  shift, and go to state 89

    $default  reduce using rule 26 (Stmt)

    Stmt    go to state 184
    Factor  go to state 91


state 181

   30 Stmt: forsym lparen FStmt semicolon cond semicolon FStmt . rparen lbrace Stmt rbrace Stmt

    rparen  shift, and go to state 185


state 182

   69 Arb: lbracket Exp rbracket Arb .

    $default  reduce using rule 69 (Arb)


state 183

   28 Stmt: ifsym lparen cond rparen lbrace Stmt rbrace Stmt .

    $default  reduce using rule 28 (Stmt)


state 184

   29 Stmt: whilesym lparen cond rparen lbrace Stmt rbrace Stmt .

    $default  reduce using rule 29 (Stmt)


state 185

   30 Stmt: forsym lparen FStmt semicolon cond semicolon FStmt rparen . lbrace Stmt rbrace Stmt

    lbrace  shift, and go to state 186


state 186

   30 Stmt: forsym lparen FStmt semicolon cond semicolon FStmt rparen lbrace . Stmt rbrace Stmt

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    returnsym  shift, and go to state 84
    ifsym      shift, and go to state 85
    whilesym   shift, and go to state 86
    forsym     shift, and go to state 87
    Getnumsym  shift, and go to state 88
    Putnumsym  shift, and go to state 89

    $default  reduce using rule 26 (Stmt)

    Stmt    go to state 187
    Factor  go to state 91


state 187

   30 Stmt: forsym lparen FStmt semicolon cond semicolon FStmt rparen lbrace Stmt . rbrace Stmt

    rbrace  shift, and go to state 188


state 188

   30 Stmt: forsym lparen FStmt semicolon cond semicolon FStmt rparen lbrace Stmt rbrace . Stmt

    number     shift, and go to state 81
    ident      shift, and go to state 82
    lparen     shift, and go to state 83
    returnsym  shift, and go to state 84
    ifsym      shift, and go to state 85
    whilesym   shift, and go to state 86
    forsym     shift, and go to state 87
    Getnumsym  shift, and go to state 88
    Putnumsym  shift, and go to state 89

    $default  reduce using rule 26 (Stmt)

    Stmt    go to state 189
    Factor  go to state 91


state 189

   30 Stmt: forsym lparen FStmt semicolon cond semicolon FStmt rparen lbrace Stmt rbrace Stmt .

    $default  reduce using rule 30 (Stmt)
