在此我只对我所扩展的功能进行一个大致的说明，对一些重点地方进行一些说明。因为时间比较紧迫所以不会像之前的设计分析那么的完整和详细，在此也请各位读者谅解，谢谢。
1.函数传参。首先是文法的设计。有两个地方需要重新进行设计，一是函数的声明的地方要加上参数列表，在C0.y文件中的Argu以及Argub就是对函数声明中参数的一个扩展；而是函数调用时的参数的传递，在C0.y文件中Argca以及Argcab就是对参数传递的一个声明。然后说说我是怎么实现参数传递的，其实就是重新声明变量，我在声明的时候其实就把整个函数给建立出来了，并且它的参数就表示为这个函数的局部变量，并且局部变量的排布按照顺序进行局部变量声明定义的顺序。接下来就是如何在函数调用的时候将参数传入函数，也就是如何给那些声明的局部变量赋值，我首先是在函数定义的时候记录下了参数的个数，然后在调用的时候，通过确定参数的位置然后将参数一个接一个的传入进去，因为文法是递归设计的所以是后面的参数先传，这是就需要注意正确计算每个参数正确的地址了。(在此再次向读者表示歉意，因为C0的扩展完成的周期比较长，所以有一些东西可能解释的不太清楚，我一时也记不太清楚当时是怎么实现的了，所以希望读者能自己阅读找到其中的逻辑关系，谢谢)
2.函数返回值的处理，这个部分我是修改了pcode解释器，之前的每一个函数调用都会腾出3个空间来存放3个特殊的值，都是与返回相关以及参数访问相关的，我便将3个空间扩展到了4个空间，这多的一个空间就是存放函数返回值的，然后在函数返回之后，我就直接从那个存放函数返回值的地方取得返回值即可。具体的实现希望读者自行参考return相关的语法和翻译方案设计，谢谢。
3.数组的实现，首先是数组的文法设计，因为支持多维数组，所以文法参考C0.y中的ArDecl以及AIDI部分。然后数组中最为困难的地方就是其寻址，因为在原pcode中的地址寻址是不支持动态寻址的，也就是要在代码生成的时候就确定好地址，而数组中的下标是可以动态的变化的，所以我需要添加新的指令来实现数组的动态寻址，这一部分的内容在pcode解释器的设计中体现出来。只要支持的动态寻址，那么数组的处理关键就是计算地址，然后将表达式的右值赋值给相应的空间就行了。因为加入了数组，和一些新的指令，这也让我其他普通变量的赋值也有了一些变化，一个变量的赋值和引用一个变量我将其写成了一种情况，若是引用这直接从相关的地址取出数据，若是赋值，也从相关地址取出数据，然后在将这个空间赋为0，最后与右值做加法，最终赋值到相关的地址空间。这也加上了很多冗余的操作。
4.输出输入，这部分的设计是比较容易的，输入即可定义为赋值，而输出就是引用值，没有太多的难度。读者可以自行通过查看C0.y以及ast.c来了解相关的实现。
5.一点很少的错误判断，不能赋值常数，不能同一层定义相同的变量
最后，由于时间的关系，我对我扩展实验的扩展内容做了一个大致的介绍，比较仓促，也希望各位读者可以谅解，谢谢。
Made By SHvsMK
王一橙
PB11011030
